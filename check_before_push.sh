#!/bin/bash
# üß™ Check Before Push - ComptaEBNL-IA
# V√©rifie que tout fonctionne avant de pousser sur GitHub

set -e

echo "üß™ ============================================="
echo "   CHECK BEFORE PUSH - ComptaEBNL-IA"
echo "üß™ ============================================="

# Variables de couleur
RED='\033[0;31m'
GREEN='\033[0;32m'
YELLOW='\033[1;33m'
BLUE='\033[0;34m'
NC='\033[0m' # No Color

# Compteurs
TOTAL_CHECKS=0
PASSED_CHECKS=0
WARNINGS=0

# Fonction d'affichage
print_check() {
    local status=$1
    local message=$2
    TOTAL_CHECKS=$((TOTAL_CHECKS + 1))
    
    if [ "$status" = "PASS" ]; then
        echo -e "${GREEN}‚úÖ $message${NC}"
        PASSED_CHECKS=$((PASSED_CHECKS + 1))
    elif [ "$status" = "WARN" ]; then
        echo -e "${YELLOW}‚ö†Ô∏è  $message${NC}"
        WARNINGS=$((WARNINGS + 1))
        PASSED_CHECKS=$((PASSED_CHECKS + 1))
    else
        echo -e "${RED}‚ùå $message${NC}"
    fi
}

echo -e "${BLUE}üìÅ V√©rification de la structure du projet...${NC}"

# V√©rifier la structure de base
if [ -d "backend" ]; then
    print_check "PASS" "Backend directory trouv√©"
else
    print_check "FAIL" "Backend directory manquant"
fi

if [ -d "frontend" ]; then
    print_check "PASS" "Frontend directory trouv√©"
else
    print_check "FAIL" "Frontend directory manquant"
fi

if [ -d "tests" ]; then
    print_check "PASS" "Tests directory trouv√©"
else
    print_check "WARN" "Tests directory manquant (optionnel)"
fi

if [ -d ".github/workflows" ]; then
    print_check "PASS" "GitHub workflows trouv√©s"
else
    print_check "FAIL" "GitHub workflows manquants"
fi

echo -e "\n${BLUE}üêç V√©rification Backend...${NC}"

# V√©rifier backend
if [ -f "backend/requirements.txt" ]; then
    print_check "PASS" "requirements.txt trouv√©"
else
    print_check "WARN" "requirements.txt manquant"
fi

if [ -f "backend/src/app.py" ] || [ -f "backend/app.py" ]; then
    print_check "PASS" "Application Flask trouv√©e"
else
    print_check "WARN" "Application Flask non trouv√©e"
fi

# Test imports Python basiques
echo -e "\n${BLUE}üîç Test imports Python...${NC}"
if python3 -c "import sys; print(f'Python {sys.version_info.major}.{sys.version_info.minor}')" 2>/dev/null; then
    print_check "PASS" "Python 3 disponible"
else
    print_check "FAIL" "Python 3 non disponible"
fi

if python3 -c "from datetime import datetime; print('DateTime OK')" 2>/dev/null; then
    print_check "PASS" "Imports basiques Python fonctionnels"
else
    print_check "FAIL" "Probl√®me imports Python"
fi

echo -e "\n${BLUE}‚öõÔ∏è V√©rification Frontend...${NC}"

# V√©rifier frontend
if [ -f "frontend/package.json" ]; then
    print_check "PASS" "package.json trouv√©"
else
    print_check "WARN" "package.json manquant"
fi

if [ -f "frontend/src/App.tsx" ] || [ -f "frontend/src/App.js" ]; then
    print_check "PASS" "Application React trouv√©e"
else
    print_check "WARN" "Application React non trouv√©e"
fi

# Test Node.js si disponible
if command -v node &> /dev/null; then
    NODE_VERSION=$(node --version)
    print_check "PASS" "Node.js disponible ($NODE_VERSION)"
else
    print_check "WARN" "Node.js non disponible"
fi

if command -v npm &> /dev/null; then
    NPM_VERSION=$(npm --version)
    print_check "PASS" "npm disponible ($NPM_VERSION)"
else
    print_check "WARN" "npm non disponible"
fi

echo -e "\n${BLUE}üß™ V√©rification Tests...${NC}"

# V√©rifier tests
if [ -f "backend/tests/test_models.py" ]; then
    print_check "PASS" "Tests backend basiques trouv√©s"
else
    print_check "WARN" "Tests backend basiques manquants"
fi

if [ -f "tests/unit/backend/models/test_subscription_models.py" ]; then
    print_check "PASS" "Tests backend avanc√©s trouv√©s"
else
    print_check "WARN" "Tests backend avanc√©s manquants"
fi

if [ -f "frontend/src/__tests__/App.test.tsx" ] || [ -f "frontend/src/App.test.tsx" ]; then
    print_check "PASS" "Tests frontend trouv√©s"
else
    print_check "WARN" "Tests frontend manquants"
fi

if [ -f "tests/run_all_tests.py" ]; then
    print_check "PASS" "Test runner complet trouv√©"
    
    # Ex√©cuter le test runner
    echo -e "\n${BLUE}üöÄ Ex√©cution test runner...${NC}"
    if python3 tests/run_all_tests.py > /dev/null 2>&1; then
        print_check "PASS" "Test runner ex√©cut√© avec succ√®s"
    else
        print_check "WARN" "Test runner a des warnings (normal)"
    fi
else
    print_check "WARN" "Test runner manquant"
fi

echo -e "\n${BLUE}üîß V√©rification CI/CD...${NC}"

# V√©rifier CI/CD
if [ -f ".github/workflows/ci-cd.yml" ]; then
    print_check "PASS" "Workflow CI/CD principal trouv√©"
else
    print_check "FAIL" "Workflow CI/CD principal manquant"
fi

# V√©rifier qu'il n'y a qu'un seul workflow actif
ACTIVE_WORKFLOWS=$(find .github/workflows -name "*.yml" | wc -l)
if [ "$ACTIVE_WORKFLOWS" -eq 1 ]; then
    print_check "PASS" "Un seul workflow actif (optimal)"
elif [ "$ACTIVE_WORKFLOWS" -gt 1 ]; then
    print_check "WARN" "Plusieurs workflows actifs ($ACTIVE_WORKFLOWS)"
else
    print_check "FAIL" "Aucun workflow trouv√©"
fi

echo -e "\n${BLUE}üîí V√©rification s√©curit√© basique...${NC}"

# V√©rifier s√©curit√©
if [ -f ".env" ]; then
    print_check "WARN" "Fichier .env d√©tect√© - v√©rifier qu'il n'est pas commit√©"
else
    print_check "PASS" "Pas de fichier .env en racine"
fi

if [ -f ".gitignore" ]; then
    print_check "PASS" ".gitignore pr√©sent"
else
    print_check "WARN" ".gitignore manquant"
fi

# Recherche rapide de secrets potentiels
SECRETS_FOUND=$(grep -r -i "password\|secret\|key" --include="*.py" --include="*.js" --include="*.ts" . 2>/dev/null | grep -v "test" | grep -v ".git" | wc -l)
if [ "$SECRETS_FOUND" -gt 10 ]; then
    print_check "WARN" "Beaucoup de r√©f√©rences secrets/passwords ($SECRETS_FOUND) - v√©rifier manuellement"
else
    print_check "PASS" "Pas de secrets √©vidents d√©tect√©s"
fi

echo -e "\n${BLUE}üìã V√©rification Documentation...${NC}"

# V√©rifier documentation
if [ -f "README.md" ]; then
    print_check "PASS" "README.md pr√©sent"
else
    print_check "WARN" "README.md manquant"
fi

if [ -f "GUIDE_CORRECTION_CICD.md" ]; then
    print_check "PASS" "Guide CI/CD pr√©sent"
else
    print_check "WARN" "Guide CI/CD manquant"
fi

if [ -f "ENVIRONNEMENT_TESTS_FINALISE.md" ]; then
    print_check "PASS" "Documentation tests pr√©sente"
else
    print_check "WARN" "Documentation tests manquante"
fi

echo -e "\n${BLUE}üê≥ V√©rification Docker...${NC}"

# V√©rifier Docker
if [ -f "docker-compose.test.yml" ]; then
    print_check "PASS" "Configuration Docker tests trouv√©e"
else
    print_check "WARN" "Configuration Docker tests manquante"
fi

if [ -f "backend/Dockerfile" ]; then
    print_check "PASS" "Dockerfile backend trouv√©"
else
    print_check "WARN" "Dockerfile backend manquant"
fi

if [ -f "frontend/Dockerfile" ]; then
    print_check "PASS" "Dockerfile frontend trouv√©"
else
    print_check "WARN" "Dockerfile frontend manquant"
fi

# Rapport final
echo -e "\n${BLUE}üìä ============================================="
echo "   RAPPORT FINAL"
echo -e "=============================================${NC}"

SUCCESS_RATE=$((PASSED_CHECKS * 100 / TOTAL_CHECKS))

echo "üìà V√©rifications totales: $TOTAL_CHECKS"
echo "‚úÖ V√©rifications r√©ussies: $PASSED_CHECKS"
echo "‚ö†Ô∏è  Warnings: $WARNINGS"
echo "üìä Taux de r√©ussite: $SUCCESS_RATE%"

echo ""
if [ $SUCCESS_RATE -ge 90 ]; then
    echo -e "${GREEN}üéâ EXCELLENT! Pr√™t pour push vers GitHub${NC}"
    echo -e "${GREEN}üöÄ Le workflow CI/CD devrait passer sans probl√®me${NC}"
    EXIT_CODE=0
elif [ $SUCCESS_RATE -ge 75 ]; then
    echo -e "${YELLOW}‚ö†Ô∏è  BIEN! Push possible avec quelques warnings${NC}"
    echo -e "${YELLOW}üîß Le workflow CI/CD devrait r√©ussir avec des am√©liorations recommand√©es${NC}"
    EXIT_CODE=0
elif [ $SUCCESS_RATE -ge 50 ]; then
    echo -e "${YELLOW}ü§î MOYEN! Push possible mais am√©liorations recommand√©es${NC}"
    echo -e "${YELLOW}‚ö†Ô∏è  Le workflow CI/CD pourrait avoir des warnings${NC}"
    EXIT_CODE=0
else
    echo -e "${RED}‚ùå PROBL√àMES D√âTECT√âS! Corrections recommand√©es avant push${NC}"
    echo -e "${RED}üõ†Ô∏è  Le workflow CI/CD pourrait √©chouer${NC}"
    EXIT_CODE=1
fi

echo ""
echo -e "${BLUE}üéØ Prochaines √©tapes recommand√©es:${NC}"
if [ $WARNINGS -gt 0 ]; then
    echo "‚Ä¢ Corriger les warnings si possible"
fi
echo "‚Ä¢ git add . && git commit -m 'votre message'"
echo "‚Ä¢ git push origin main (ou votre branche)"
echo "‚Ä¢ V√©rifier GitHub Actions: https://github.com/LnDevAi/ComptaEBNL-IA/actions"

echo ""
echo -e "${GREEN}‚ú® Le nouveau workflow adaptatif est con√ßu pour r√©ussir m√™me avec des warnings!${NC}"

exit $EXIT_CODE