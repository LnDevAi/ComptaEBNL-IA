#!/bin/bash
# üöÄ Script de d√©ploiement simplifi√© avec guidance
# G√®re toutes les v√©rifications et guide l'utilisateur

set -e

echo "üöÄ ================================================="
echo "   D√âPLOIEMENT SIMPLIFI√â COMPTAEBNL-IA"
echo "   Guide pas-√†-pas avec v√©rifications"
echo "üöÄ ================================================="

# Variables de couleur
RED='\033[0;31m'
GREEN='\033[0;32m'
YELLOW='\033[1;33m'
BLUE='\033[0;34m'
NC='\033[0m' # No Color

# Fonctions utilitaires
log_info() {
    echo -e "${BLUE}‚ÑπÔ∏è $1${NC}"
}

log_success() {
    echo -e "${GREEN}‚úÖ $1${NC}"
}

log_warning() {
    echo -e "${YELLOW}‚ö†Ô∏è $1${NC}"
}

log_error() {
    echo -e "${RED}‚ùå $1${NC}"
}

# Fonction de pause pour laisser l'utilisateur lire
pause_with_message() {
    local message="$1"
    echo ""
    echo -e "${YELLOW}üìã $message${NC}"
    echo -e "${BLUE}Appuyez sur Entr√©e pour continuer...${NC}"
    read -r
}

# √âtape 1: V√©rification des pr√©requis
check_prerequisites() {
    log_info "√âtape 1: V√©rification des pr√©requis techniques"
    echo ""
    
    local all_good=true
    
    # AWS CLI
    if command -v aws &> /dev/null; then
        log_success "AWS CLI install√©: $(aws --version | cut -d' ' -f1,2)"
    else
        log_error "AWS CLI non install√©"
        all_good=false
    fi
    
    # Node.js
    if command -v node &> /dev/null; then
        log_success "Node.js install√©: $(node --version)"
    else
        log_error "Node.js non install√©"
        all_good=false
    fi
    
    # Amplify CLI
    if command -v amplify &> /dev/null; then
        log_success "Amplify CLI install√©"
    else
        log_error "Amplify CLI non install√©"
        all_good=false
    fi
    
    # Docker (optionnel pour Amplify)
    if command -v docker &> /dev/null; then
        log_success "Docker install√©: $(docker --version | cut -d' ' -f1,2,3)"
    else
        log_warning "Docker non install√© (optionnel pour Amplify)"
    fi
    
    if [ "$all_good" = false ]; then
        echo ""
        log_error "PR√âREQUIS MANQUANTS!"
        echo ""
        echo "üõ†Ô∏è Pour installer les pr√©requis:"
        echo "   ./setup_aws_prerequisites.sh"
        echo ""
        exit 1
    fi
    
    log_success "Tous les pr√©requis sont install√©s"
    echo ""
}

# √âtape 2: Configuration AWS
configure_aws() {
    log_info "√âtape 2: Configuration AWS"
    echo ""
    
    # V√©rifier si AWS est configur√©
    if aws sts get-caller-identity &>/dev/null; then
        log_success "AWS CLI d√©j√† configur√©"
        echo ""
        echo "üìã Informations du compte AWS:"
        aws sts get-caller-identity --output table
        echo ""
        
        echo "Voulez-vous utiliser cette configuration ? (o/n)"
        read -r response
        if [[ "$response" != "o" && "$response" != "O" && "$response" != "yes" ]]; then
            configure_aws_fresh
        fi
    else
        log_warning "AWS CLI non configur√©"
        echo ""
        configure_aws_fresh
    fi
}

# Configuration AWS fra√Æche
configure_aws_fresh() {
    echo ""
    log_info "Configuration AWS CLI..."
    echo ""
    echo "üîë Vous avez besoin de vos cl√©s AWS:"
    echo ""
    echo "üìã Comment obtenir vos cl√©s:"
    echo "   1. Connectez-vous √† https://console.aws.amazon.com"
    echo "   2. Allez dans IAM > Users > [Votre utilisateur]"
    echo "   3. Onglet 'Security credentials'"
    echo "   4. Cliquez 'Create access key'"
    echo "   5. Choisissez 'Command Line Interface (CLI)'"
    echo "   6. Copiez les cl√©s g√©n√©r√©es"
    echo ""
    
    pause_with_message "Avez-vous vos cl√©s AWS pr√™tes ?"
    
    echo ""
    log_info "Configuration AWS CLI..."
    echo ""
    echo "üí° Conseils:"
    echo "   - Region recommand√©e: us-east-1"
    echo "   - Output format: json"
    echo ""
    
    aws configure
    
    echo ""
    log_info "V√©rification de la configuration..."
    if aws sts get-caller-identity &>/dev/null; then
        log_success "Configuration AWS r√©ussie !"
        echo ""
        aws sts get-caller-identity --output table
    else
        log_error "Configuration AWS √©chou√©e"
        echo ""
        echo "üîß V√©rifiez:"
        echo "   - Cl√©s AWS correctes"
        echo "   - Permissions de l'utilisateur"
        echo "   - Connexion internet"
        echo ""
        exit 1
    fi
}

# √âtape 3: Choix de l'option de d√©ploiement
choose_deployment_option() {
    log_info "√âtape 3: Choix de l'option de d√©ploiement"
    echo ""
    
    echo "üöÄ Options de d√©ploiement disponibles:"
    echo ""
    echo "1. üü¢ AWS Amplify (RECOMMAND√â)"
    echo "   ‚úÖ Simple et rapide"
    echo "   ‚úÖ SSL/HTTPS automatique"
    echo "   ‚úÖ Scaling automatique"
    echo "   ‚úÖ Free tier disponible"
    echo "   üí∞ Co√ªt: ~$15-40/mois apr√®s free tier"
    echo ""
    echo "2. üü° D√©ploiement manuel Amplify"
    echo "   ‚úÖ Contr√¥le √©tape par √©tape"
    echo "   ‚úÖ Id√©al pour d√©bogage"
    echo ""
    echo "3. üîµ AWS ECS/Fargate (AVANC√â)"
    echo "   ‚úÖ Containers Docker"
    echo "   ‚úÖ Production enterprise"
    echo "   üí∞ Co√ªt: ~$100-150/mois"
    echo ""
    
    echo "Choisissez une option (1-3): "
    read -r choice
    
    case $choice in
        1)
            DEPLOYMENT_TYPE="amplify-auto"
            log_success "Option choisie: AWS Amplify automatique"
            ;;
        2)
            DEPLOYMENT_TYPE="amplify-manual"
            log_success "Option choisie: AWS Amplify manuel"
            ;;
        3)
            DEPLOYMENT_TYPE="ecs"
            log_success "Option choisie: AWS ECS/Fargate"
            ;;
        *)
            log_warning "Option invalide, utilisation d'Amplify automatique par d√©faut"
            DEPLOYMENT_TYPE="amplify-auto"
            ;;
    esac
    
    echo ""
}

# D√©ploiement Amplify automatique
deploy_amplify_auto() {
    log_info "D√©ploiement AWS Amplify automatique"
    echo ""
    
    log_info "Utilisation du script de d√©ploiement automatis√©..."
    
    if [ -f "deployment/scripts/deploy-to-aws.sh" ]; then
        chmod +x deployment/scripts/deploy-to-aws.sh
        echo ""
        log_info "Lancement du d√©ploiement..."
        echo ""
        
        ./deployment/scripts/deploy-to-aws.sh production amplify us-east-1
        
    else
        log_error "Script de d√©ploiement non trouv√©"
        echo ""
        log_info "Tentative de d√©ploiement manuel..."
        deploy_amplify_manual
    fi
}

# D√©ploiement Amplify manuel
deploy_amplify_manual() {
    log_info "D√©ploiement AWS Amplify manuel"
    echo ""
    
    # V√©rifier si Amplify est d√©j√† initialis√©
    if [ -d "amplify" ]; then
        log_warning "Projet Amplify d√©j√† initialis√©"
        echo ""
        echo "Voulez-vous r√©initialiser ? (o/n)"
        read -r response
        if [[ "$response" == "o" || "$response" == "O" || "$response" == "yes" ]]; then
            rm -rf amplify
            log_info "Projet Amplify supprim√©"
        fi
    fi
    
    echo ""
    log_info "√âtape 1: Initialisation Amplify"
    echo ""
    echo "üí° Configuration recommand√©e:"
    echo "   - Project name: comptaebnl-ia"
    echo "   - Environment: production"
    echo "   - Editor: Visual Studio Code"
    echo "   - Type: javascript"
    echo "   - Framework: react"
    echo "   - Source directory: frontend/src"
    echo "   - Build directory: frontend/build"
    echo "   - Build command: npm run build"
    echo "   - Start command: npm start"
    echo ""
    
    pause_with_message "Pr√™t pour l'initialisation Amplify ?"
    
    echo ""
    amplify init
    
    echo ""
    log_info "√âtape 2: Ajout du hosting"
    pause_with_message "Configuration du hosting..."
    
    amplify add hosting
    
    echo ""
    log_info "√âtape 3: D√©ploiement"
    pause_with_message "Lancement du d√©ploiement..."
    
    amplify push
    
    echo ""
    log_info "√âtape 4: Publication"
    amplify publish
    
    echo ""
    log_success "D√©ploiement Amplify manuel termin√© !"
}

# D√©ploiement ECS
deploy_ecs() {
    log_info "D√©ploiement AWS ECS/Fargate"
    echo ""
    
    log_warning "D√©ploiement ECS n√©cessite Docker configur√©"
    
    # V√©rifier Docker
    if ! command -v docker &> /dev/null; then
        log_error "Docker non install√© - requis pour ECS"
        echo ""
        echo "Installez Docker avec:"
        echo "   ./setup_aws_prerequisites.sh"
        exit 1
    fi
    
    # V√©rifier si Docker fonctionne
    if ! docker info &>/dev/null; then
        log_error "Docker daemon non d√©marr√©"
        echo ""
        echo "D√©marrez Docker avec:"
        echo "   sudo systemctl start docker"
        echo "   sudo usermod -aG docker $USER"
        echo "   newgrp docker"
        exit 1
    fi
    
    log_info "Lancement du d√©ploiement ECS..."
    echo ""
    
    if [ -f "deployment/scripts/deploy-to-aws.sh" ]; then
        chmod +x deployment/scripts/deploy-to-aws.sh
        ./deployment/scripts/deploy-to-aws.sh production ecs us-east-1
    else
        log_error "Script ECS non trouv√©"
        exit 1
    fi
}

# V√©rification post-d√©ploiement
post_deployment_check() {
    log_info "V√©rification post-d√©ploiement"
    echo ""
    
    case $DEPLOYMENT_TYPE in
        "amplify-auto"|"amplify-manual")
            if command -v amplify &> /dev/null; then
                echo ""
                log_info "Statut Amplify:"
                amplify status || echo "Impossible d'obtenir le statut"
                
                echo ""
                log_info "Pour obtenir l'URL de votre application:"
                echo "   amplify hosting list"
                echo ""
            fi
            ;;
        "ecs")
            echo ""
            log_info "Pour v√©rifier ECS:"
            echo "   aws ecs list-clusters"
            echo "   aws ecs list-services --cluster comptaebnl-ia-cluster"
            echo ""
            ;;
    esac
    
    echo ""
    log_success "üéâ D√âPLOIEMENT TERMIN√â !"
    echo ""
    echo "üìã Prochaines √©tapes:"
    echo "   1. Testez votre application"
    echo "   2. Configurez un domaine personnalis√© (optionnel)"
    echo "   3. Configurez le monitoring"
    echo ""
}

# Programme principal
main() {
    echo ""
    echo "üéØ Ce script va vous guider √©tape par √©tape pour d√©ployer ComptaEBNL-IA"
    echo ""
    
    pause_with_message "Pr√™t √† commencer ?"
    
    check_prerequisites
    configure_aws
    choose_deployment_option
    
    echo ""
    log_info "D√©but du d√©ploiement avec l'option: $DEPLOYMENT_TYPE"
    echo ""
    
    case $DEPLOYMENT_TYPE in
        "amplify-auto")
            deploy_amplify_auto
            ;;
        "amplify-manual")
            deploy_amplify_manual
            ;;
        "ecs")
            deploy_ecs
            ;;
    esac
    
    post_deployment_check
}

# Gestion des erreurs
trap 'echo ""; log_error "D√©ploiement interrompu"; exit 1' INT

# Aide
if [[ "$1" == "--help" || "$1" == "-h" ]]; then
    echo "üöÄ Script de d√©ploiement simplifi√© ComptaEBNL-IA"
    echo ""
    echo "Usage: $0"
    echo ""
    echo "Ce script guide pas-√†-pas pour:"
    echo "   1. V√©rifier les pr√©requis"
    echo "   2. Configurer AWS CLI"
    echo "   3. Choisir l'option de d√©ploiement"
    echo "   4. D√©ployer l'application"
    echo ""
    echo "Options de d√©ploiement:"
    echo "   - AWS Amplify (automatique)"
    echo "   - AWS Amplify (manuel)"
    echo "   - AWS ECS/Fargate"
    echo ""
    exit 0
fi

# Ex√©cuter le programme principal
main